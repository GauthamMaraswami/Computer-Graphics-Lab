#include <GL/glut.h>
#include<GL/gl.h>
#include<GL/glu.h>
#include<stdio.h>
#include<math.h>
#include<iostream>
#define RAD (3.142/180.0)
 GLfloat xRotated, yRotated, zRotated;
static GLfloat theta[] = {0.0,0.0,0.0};
static GLint axis = 2;
int x=0,y=1,z=0;
static GLfloat vert[][4]={
{ 1.0f, 1.0f, 1.0f},
{-1.0f, 1.0f, 1.0f},
{-1.0f, -1.0f, 1.0f},
{ 1.0f, -1.0f, 1.0f},
{ 1.0f, 1.0f, -1.0f},
{-1.0f, 1.0f, -1.0f},
{-1.0f, -1.0f, -1.0f},
{ 1.0f, -1.0f, -1.0f},
};

void spinCube()
{
theta[axis] += 2.0;
	if( theta[axis] > 360.0 ) 
    theta[axis] -= 360.0;
	glutPostRedisplay();
}
void Init(){
  
glClearColor(0,0,0,0);
  int x=50;
int y=50;
  glMatrixMode(GL_PROJECTION);  
    glLoadIdentity();
    gluPerspective(40.0,(GLdouble)x/(GLdouble)y,0.5,20.0);
    glMatrixMode(GL_MODELVIEW);
    glViewport(0,0,x,y);  
}

void DrawCube(void)
{

   

   glLoadIdentity();
        glTranslatef(0.0,0.0,-10.5);
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glRotatef(theta[0], 1.0, 0.0, 0.0);
	glRotatef(theta[1], 0.0, 1.0, 0.0);
	glRotatef(theta[2], 0.0, 0.0, 1.0);

  glBegin(GL_QUADS);       
    glColor3f(0.0f,1.0f,0.0f);    
    glVertex3f( 1.0f, 1.0f, 1.0f);   
    glVertex3f( -1.0f, 1.0f, 1.0f); 
     glVertex3f( -1.0f, -1.0f, 1.0f); 
     glVertex3f( 1.0f, -1.0f, 1.0f); 
    glColor3f(1.0f,0.5f,0.0f);    
     glVertex3f( 1.0f, 1.0f, -1.0f); 
    glVertex3f( -1.0f, 1.0f, -1.0f); 
     glVertex3f(-1.0f, -1.0f, -1.0f); 
    glVertex3f( 1.0f, -1.0f, -1.0f); 
    glColor3f(1.0f,0.0f,0.0f);   
    glVertex3f( 1.0f, 1.0f, 1.0f); 
 glVertex3f( -1.0f, 1.0f, 1.0f); 
 glVertex3f( -1.0f, 1.0f, -1.0f); 
 glVertex3f( 1.0f, 1.0f, -1.0f); 
    glColor3f(1.0f,1.0f,0.0f);   
      glVertex3f( -1.0f, -1.0f, 1.0f); 
 glVertex3f( 1.0f, -1.0f, 1.0f); 
 glVertex3f( 1.0f, -1.0f, -1.0f); 
 glVertex3f( -1.0f, -1.0f, -1.0f); 
    glColor3f(0.0f,0.0f,1.0f);    
        glVertex3f( 1.0f, -1.0f, 1.0f); 
 glVertex3f(1.0f, 1.0f, 1.0f); 
 glVertex3f( 1.0f, 1.0f, -1.0f); 
 glVertex3f( 1.0f, -1.0f, -1.0f); 
    glColor3f(1.0f,0.0f,1.0f);    
       glVertex3f( -1.0f, 1.0f, 1.0f); 
 glVertex3f( -1.0f, -1.0f, 1.0f); 
 glVertex3f(-1.0f, -1.0f, -1.0f); 
 glVertex3f( -1.0f, 1.0f, -1.0f); 
  glEnd();           
glFlush();
}



void idle()
{
 
     yRotated += 0.01;
     xRotated += 0.02;
    DrawCube();
}

void keyboardtest(unsigned char key, int x, int y){
	//printf("handy");
	
	if(key=='x' || key =='X') axis = 0;
	else if(key=='y' || key =='Y') axis = 1;
	else if(key=='z' || key =='Z') axis = 2;
}
void myReshape(int w, int h)
{
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
        glOrtho(-2.0, 2.0, -2.0 * (GLfloat) h / (GLfloat) w,
            2.0 * (GLfloat) h / (GLfloat) w, -10.0, 10.0);
    else
        glOrtho(-2.0 * (GLfloat) w / (GLfloat) h,
            2.0 * (GLfloat) w / (GLfloat) h, -2.0, 2.0, -10.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char **argv)
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
glutInitWindowPosition(100, 100);
   
glutCreateWindow(argv[0]);
Init();
 glutReshapeFunc(myReshape);
glutKeyboardFunc(keyboardtest);
glutDisplayFunc(DrawCube);

glutIdleFunc(idle);
glutMainLoop();
return 0;

}
